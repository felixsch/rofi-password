#!/bin/bash

CONFIG="$HOME/.config/rofi-password.conf"
if [ -f $CONFIG ]; then
  source $CONFIG
fi

# Configuration options -------------------------------------------------------
# path to the password store (default: $HOME/.password-store)
PASSWORD_STORE="${PASSWORD_STORE:-$HOME/.password-store}"

# marker to detect if a password entry has a totp token set (default: totp)
MARKER_TWOFA="${MARKER_TWOFA:-totp}"

# rofi theme to be used (default: none)
ROFI_THEME="${ROFI_THEME:-}"

# rofi extra arguments to supply (default: none)
ROFI_EXTRA_ARGS="${ROFI_THEME:-}"

# how to display the password (first line in a password entry) (default: Password)
LABEL_PASSWORD="${LABEL_PASSWORD:-Password}"

# how to display 2FA (TOTP) token generation (default: 2FA token)
LABEL_TWOFA="${LABEL_TWOFA:-2FA token}"

# clear clipboard after in seconds (default: 30)
CLEAR_CLIPBOARD_AFTER="${CLEAR_CLIPBOARD_AFTER:-30}"

# xclip extra arguments (default: none)
XCLIP_EXTRA_ARGS="${XCLIP_EXTRA_ARGS:-}"

# delay between selecting typing action and actually typing the value in ms (default: 12)
DELAY_TYPING="${DELAY_TYPING:-12}"

# -----------------------------------------------------------------------------

rofi_pass() {
  ensure_required_apps
  ensure_valid_configuration

  # select password
  selected=$(all_passwords | show_rofi -p 'passwords')
  ensure_user_input $selected

  # select action
  # We need to wait for pass to finish the password show action otherwise
  # rofi can take the focus away from the password input which is super annoying
  field=$(show_rofi -p <<< "$(fields_for $selected)")
  ensure_user_input $field

  # select output action
  action=$(all_actions | show_rofi -p 'action')
  ensure_user_input $action

  # fetch and generate result
  case $field in
    $LABEL_PASSWORD) result=$(fetch_password_for $selected);;
    $LABEL_TWOFA)    result=$(generate_totp_for $selected);;
    *)               result=$(fetch_field_for $selected $field);;
  esac
  ensure_data "Could not fetch field from password store" $result

  # execute action
  case $action in
    "Type..") type_result $result;;
    "Copy..") copy_result $result;;
  esac
}


# validations -----------------------------------------------------------------
rofi_pass_fatal() { echo "Error: $@" 1>&2; exit 1; }

ensure_required_apps() {
  required=( pass rofi oathtool xclip xdotool xset)

  for app in "${required[@]}"; do
    if ! which $app > /dev/null; then
      rofi_pass_fatal "This script requires '$app'. Install first!"
    fi
  done
}

ensure_valid_configuration() {
  if [ ! -d $PASSWORD_STORE ]; then
    rofi_pass_fatal "Password store not found: No such file or directory"
  fi
}

ensure_user_input() { 
  if [ "x$1" == "x" ]; then
    rofi_pass_fatal "User interrupted rofi. Stopping here!"
  fi
}

ensure_data() {
  if [ "x$2" == "x" ]; then
    rofi_pass_fatal "Error: $1"
  fi
}

# helpers ---------------------------------------------------------------------
show_rofi() {
  if [ "x$ROFI_THEME" == "x" ]; then
    rofi -dmenu -markup $@
  else
    rofi -theme $ROFI_THEME $ROFI_EXTRA_ARGS -dmenu $@
  fi
  return $?
}

show_help() {
  name=$(basename $0)
  cat << EOF
  $name - Simple rofi pass integration script

  Usage: $name [FLAGS] [SELECTED]
  Optional flags are:
    -h | --help                      Shows this help information
    -g | --generate-token SELECTED   Generates a TOTP (2FA) token
EOF
}

all_passwords() {
  find $PASSWORD_STORE/ -name '*.gpg' -printf "%P\n" | sed 's/.gpg//g' | sort
}

all_actions() {
  echo "Type.."
  echo "Copy.."
}

type_result() {
  echo "$1" | xdotool type --delay $DELAY_TYPING --clearmodifiers --file -
}

copy_result() {
  echo "$1" | xclip $XCLIP_EXTRA_ARGS
  sleep $CLEAR_CLIPBOARD_AFTER
  echo "" | xclip $XCLIP_EXTRA_ARGS
  echo "clipboard cleared!"
}

has_totp() {
  pass show $1 | grep "$MARKER_TWOFA:" > /dev/null
}

fields_for() {
  echo "$LABEL_PASSWORD"

  if has_totp $1; then
    echo "$LABEL_TWOFA"
  fi

  pass show $1 | sed -nr 's/(.*): .*/\1/p'
}

fetch_field_for() {
  pass show $1 | grep "$2:" | cut -d" " -f 2
}

fetch_password_for() {
  pass show $1 | head -n 1
}

generate_totp_for() {
  token=$(fetch_field_for $1 $MARKER_TWOFA)
  ensure_data "Could not fetch 2fa token for $1" $token

  oathtool -b --totp "$token"
}

# call main -------------------------------------------------------------------
case $1 in
  "--help" | "-h")           show_help;;
  "--generate-token" | "-g") generate_totp_for $2;;
  *)                         rofi_pass $@;;
esac
