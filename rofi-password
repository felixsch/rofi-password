#!/bin/bash

ROFI_PASS_CONFIG="$HOME/.config/rofi-pass.conf"

if [ -f $ROFI_PASS_CONFIG ]; then
  source ~/.config/rofi-pass.conf
fi

PASSWORD_STORE="${PASSWORD_STORE:-$HOME/.password-store}"
THEME="${THEME:-generated}"
PASSWORD_LABEL="${PASSWORD_LABEL:-Password}"
TWOFA_MARKER="${TWOFA_MARKER:-totp}"
TWOFA_LABEL="${TWOFA_LABEL:-2FA token}"

rofi_pass() {
  ensure_required_apps
  ensure_valid_configuration

  # select password
  selected=$(all_passwords | show_rofi -p 'passwords')
  ensure_user_input $selected

  # select action
  field=$(fields_for $selected | show_rofi -p 'field')
  ensure_user_input $field

  # select output action
  action=$(all_actions | show_rofi -p 'action')
  ensure_user_input $action

  # fetch and generate result
  case $field in
    $PASSWORD_LABEL) result=$(fetch_password_for $selected);;
    $TWOFA_LABEL)    result=$(generate_totp_for $selected);;
    *)               result=$(fetch_field_for $selected $field);;
  esac
  ensure_data "Could not fetch field from password store" $result

  echo -e "selected=$selected\nfield=$field\naction=$action\nresult=$result"

  # execute action
  case $action in
    "Type..") type_result $result;;
    "Copy..") copy_result $result;;
  esac
}


# validations -----------------------------------------------------------------
rofi_pass_fatal() { echo "Error: $@" 1>&2; exit 1; }

ensure_required_apps() {
  required=( pass oathtool xclip )

  for app in "${required[@]}"; do
    if ! which $app > /dev/null; then
      rofi_pass_fatal "This script requires '$app'. Install first!"
    fi
  done
}

ensure_valid_configuration() {
  if [ ! -d $PASSWORD_STORE ]; then
    rofi_pass_fatal "Password store not found: No such file or directory"
  fi
}

ensure_user_input() { 
  if [ "x$1" == "x" ]; then
    rofi_pass_fatal "User interrupted rofi. Stopping here!"
  fi
}

ensure_data() {
  if [ "x$2" == "x" ]; then
    rofi_pass_fatal "Error: $1"
  fi
}

# helpers ---------------------------------------------------------------------
show_rofi() {
  if [ "x$THEME" == "x" ]; then
    rofi -dmenu -markup $@
  else
    rofi -theme $THEME -markup -dmenu $@
  fi
  return $?
}

all_passwords() {
  find $PASSWORD_STORE/ -name '*.gpg' -printf "%P\n" | sed 's/.gpg//g' | sort
}

all_actions() {
  echo "Type.."
  echo "Copy.."
}

has_totp() {
  pass show $1 | grep "$TWOFA_MARKER:" > /dev/null
}

fields_for() {
  echo "$PASSWORD_LABEL"

  if has_totp $1; then
    echo "$TWOFA_LABEL"
  fi

  pass show $1 | sed -nr 's/(.*): .*/\1/p'
}

fetch_field_for() {
  pass show $1 | grep "$2:" | cut -d" " -f 2
}

fetch_password_for() {
  pass show $1 | head -n 1
}

generate_totp_for() {
  token=$(fetch_field_for $1 $TWOFA_MARKER)
  ensure_data "Could not fetch 2fa token for $1" $token

  oathtool -b --totp "$token"
}

# call main -------------------------------------------------------------------
rofi_pass $@
